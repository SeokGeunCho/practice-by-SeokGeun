/* 🌐 그래프(Graph)란?
✅ 정의
그래프는 **정점(노드)**과 **간선(Edge)**으로 이루어진 자료구조야.
즉, **"사람(정점)"과 "관계(간선)"**을 표현한다고 보면 돼.
예:
사람 → 사람 → 친구 관계
도시 → 도시 → 도로 연결
컴퓨터 → 컴퓨터 → 네트워크

📘 핵심 용어
용어	            설명
정점 (Vertex)	노드 하나 (사람, 도시, 웹페이지 등)
간선 (Edge)	    정점 간 연결 (도로, 링크, 관계 등)
무방향 그래프	    A ↔ B (양방향)
방향 그래프     	A → B (단방향)
가중치 (Weight)	연결 간의 비용/시간/거리 등
인접(Adjacent)	간선으로 연결된 정점
차수 (Degree)	하나의 노드에 연결된 간선 수

🖼 그래프 예시

    A —— B
     \   |
      \  |
        C

정점: A, B, C
간선: A-B, B-C, A-C
무방향 그래프

✅ 그래프 구현 방법 (자바)
방법	                                특징
인접 행렬 (2차원 배열)	                정점 수가 작을 때 사용
인접 리스트 (List<Node>[] 또는 Map)    정점 수가 많고 간선이 적을 때 유리 (Sparse)

🧠 그래프는 어디에 쓰일까?
활용 분야	        설명
지도, 네비게이션	    도시 간 이동, 경로 탐색
소셜 네트워크	        친구 추천, 연결성 분석
네트워크/통신망	    컴퓨터 간 연결
게임 맵/AI	        길찾기 알고리즘
최단 거리, 최소 비용	Dijkstra, Kruskal 알고리즘 등

✅ 정리 요약
항목        설명
구성	       정점 + 간선
표현	       인접 리스트 / 인접 행렬
탐색	       DFS, BFS
자바	       List<List<Integer>>, Queue, Stack      */






package Graph;

public class Outline {
}
