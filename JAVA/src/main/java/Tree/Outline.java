/*
🌳 트리(Tree)란?
트리는 "거꾸로 된 나무"처럼 생긴 계층 구조의 자료구조야.
데이터가 "부모 → 자식" 형태로 연결되며, 위에서 아래로 뻗어가.

📘 트리 용어 정리
용어	                    설명
노드(Node)	            트리의 하나의 데이터 단위 (ex: 원, 박스 등)
루트 노드(Root Node)	    트리의 가장 위에 있는 노드 (시작점)
자식 노드(Child Node)	다른 노드로부터 연결된 하위 노드
부모 노드(Parent Node)	자식 노드를 가지는 노드
형제 노드(Sibling)	    같은 부모를 가진 노드들
리프 노드(Leaf Node)	    자식이 없는 노드 (끝 노드)
서브트리(Subtree)	    어떤 노드를 루트로 하는 하위 트리
레벨(Level)	            루트부터 몇 층 떨어져 있는지 (루트는 0 또는 1부터 시작)
높이(Height)	            트리의 최대 레벨 수

✅ 트리 구조 그림 (예시)

코드 복사
             A         ← 루트 노드
           /   \
         B       C     ← 자식 노드
        / \     / \
       D   E   F   G   ← 리프 노드

루트: A
A의 자식: B, C
B의 자식: D, E
리프 노드: D, E, F, G
레벨 0: A
레벨 1: B, C
레벨 2: D, E, F, G
트리의 높이: 3

🔸 트리의 종류
종류	                 설명
일반 트리	         자식 수 제한 없음
이진 트리	         자식이 최대 2개인 트리
이진 탐색 트리 (BST)	 왼쪽은 작고, 오른쪽은 큰 값으로 정렬
AVL 트리	             높이 균형을 유지하는 BST
힙 트리	             최소/최대 우선순위를 가지는 트리 (Heap)

🧠 트리의 활용 예시
활용	              설명
폴더 구조	      루트 디렉토리 → 하위 폴더
웹사이트 메뉴	      메뉴 → 서브 메뉴
게임 AI	          결정 트리
이진 탐색 트리	  빠른 검색/삽입/삭제 (O(log n))
힙	              우선순위 큐, 정렬 등에 활용

✅ 정리 요약
핵심 요소	      설명
트리란?	         계층 구조 자료구조 (부모-자식 관계)
용어	             루트,노드, 리프, 레벨, 높이 등
이진 트리	     자식 2개 제한 트리
실습	             자바로 TreeNode 만들어보기
활용	             폴더, 탐색, 우선순위, 게임 로직 등

 */

package Tree;

class Outline {
    public static void main(String[] args) {
    }
}
