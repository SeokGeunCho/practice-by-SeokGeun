✅ 공통점 (ArrayList vs LinkedList)

공통점	                    설명
List 인터페이스 구현	     둘 다 List를 구현해서 사용법이 거의 동일함 (add(), get(), remove() 등)
순서 유지	                 데이터 삽입 순서를 유지함
중복 허용	                  중복 데이터를 저장할 수 있음
-----------------------------------------------------------------------------
✅ ArrayList란?
List<String> list = new ArrayList<>();

📌 특징
배열 기반의 자료구조
요소에 빠르게 접근(get) 가능 (인덱스로 접근)
중간 삽입/삭제는 느림 (전체 밀거나 당겨야 함)
-----------------------------------------------------------------------------
✅ 사용 예

List<String> fruits = new ArrayList<>();

fruits.add("사과");
fruits.add("바나나");
System.out.println(fruits.get(0)); // "사과"
-----------------------------------------------------------------------------
✅ LinkedList란?

List<String> list = new LinkedList<>();
📌 특징
노드 기반의 자료구조  // 노드(node) 네트워크에 연결되어 있는 1개의 기기
각 요소가 앞/뒤 노드를 참조함 (이중 연결 리스트)
중간 삽입/삭제가 빠름
접근 속도는 느림 (앞에서부터 순차 탐색)
-----------------------------------------------------------------------------
✅ 사용 예

List<String> cities = new LinkedList<>();
cities.add("서울");
cities.add("부산");
cities.add(1, "대구"); // 중간 삽입이 빠름
-----------------------------------------------------------------------------
✅ 차이점 요약
비교 항목         	ArrayList	            LinkedList
내부 구조	          배열	                  연결 리스트
접근 속도	          빠름 (인덱스로 접근)	      느림 (순차 탐색)
삽입/삭제 속도	  느림 (복사 발생)          빠름 (노드 연결만 수정)
메모리 사용	      적음	                  더 많음 (노드 연결 정보 저장 필요)

-----------------------------------------------------------------------------
✅ 어떤 상황에 써야 하나요?
상황	                                    추천
조회가 많다	                         ✅ ArrayList
삽입/삭제가 많다	                     ✅ LinkedList
메모리를 아끼고 싶다	                    ArrayList
큐, 덱처럼 양방향 삽입 삭제 필요	            LinkedList 사용 가능 (Queue, Deque로 활용 가능)

-----------------------------------------------------------------------------
✨ 실전 팁
대부분의 상황에서는 ArrayList가 더 빠르고 간편해서 더 많이 사용됨.
삽입/삭제가 리스트 중간에서 자주 일어나는 경우는 LinkedList가 유리할 수 있음.